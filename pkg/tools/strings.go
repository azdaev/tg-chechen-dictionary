package tools

import (
	"fmt"
	"regexp"
	"strings"
)

func Clean(text string) string {
	re := regexp.MustCompile(`<[^>]*>`)
	output := re.ReplaceAllString(text, "")
	output = strings.ReplaceAll(output, "<>", ";")
	output = strings.ReplaceAll(output, "<br />", " ")
	output = strings.ReplaceAll(output, "\n", " ")
	return output
}

func EscapeUnclosedTags(text string) string {
	re := regexp.MustCompile(`<[^>]*>`)
	matches := re.FindAllString(text, -1)
	count := 0
	for _, match := range matches {
		if strings.HasPrefix(match, "</") {
			count--
		} else {
			count++
		}
	}
	if count != 0 {
		return Clean(text) //TODO: optimize - one function for check. if true clean
	}
	return text
}

// FormatTranslation —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä–Ω—É—é —Å—Ç–∞—Ç—å—é –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–æ—Ç–µ
func FormatTranslation(text string) string {
	if text == "" {
		return ""
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–ª–æ–≤–æ (–≤ –∂–∏—Ä–Ω–æ–º —à—Ä–∏—Ñ—Ç–µ –∏–ª–∏ –≤ –Ω–∞—á–∞–ª–µ)
	wordRe := regexp.MustCompile(`\*\*([^*]+)\*\*`)
	wordMatch := wordRe.FindStringSubmatch(text)

	var word string
	if len(wordMatch) > 1 {
		word = strings.TrimSpace(wordMatch[1])
		// –£–¥–∞–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
		text = wordRe.ReplaceAllString(text, "")
	}

	// –£–¥–∞–ª—è–µ–º —Ç–∏—Ä–µ –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ª–æ–≤–∞
	text = strings.TrimSpace(text)
	text = strings.TrimPrefix(text, "-")
	text = strings.TrimSpace(text)

	// –£–¥–∞–ª—è–µ–º –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–º–µ—Ç—ã (–æ–¥–Ω—É –±—É–∫–≤—É –≤ –Ω–∞—á–∞–ª–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä "–∂", "—Å", "–º")
	grammarRe := regexp.MustCompile(`^[–∞-—è—ë]\s+`)
	text = grammarRe.ReplaceAllString(text, "")

	// –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Ü–∏—Ñ—Ä–∞–º —Å —Å–∫–æ–±–∫–∞–º–∏ (1), 2), 3) –∏ —Ç.–¥.)
	meaningRe := regexp.MustCompile(`(\d+\))`)
	parts := meaningRe.Split(text, -1)
	meaningNumbers := meaningRe.FindAllString(text, -1)

	var result strings.Builder

	if word != "" {
		result.WriteString(fmt.Sprintf("üìù %s\n\n", strings.ToUpper(word)))
	}

	meaningIndex := 1
	for i, part := range parts {
		part = strings.TrimSpace(part)
		if part == "" {
			continue
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏—è
		if i > 0 && i-1 < len(meaningNumbers) {
			result.WriteString(fmt.Sprintf("%s ", getNumberEmoji(meaningIndex)))
			meaningIndex++
		} else if i == 0 && len(meaningNumbers) == 0 {
			// –ï—Å–ª–∏ –≤—Å–µ–≥–æ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏
			result.WriteString("1Ô∏è‚É£ ")
		} else if i == 0 {
			continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—É—é —á–∞—Å—Ç—å –¥–æ –ø–µ—Ä–≤–æ–π —Ü–∏—Ñ—Ä—ã
		}

		// –ü–∞—Ä—Å–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥ –∏ –ø—Ä–∏–º–µ—Ä—ã
		meaning := part

		// –†–∞–∑–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥ –∏ –ø—Ä–∏–º–µ—Ä—ã
		// –ò—â–µ–º –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –ø—Ä–∏–º–µ—Ä–∞
		semicolonIndex := findMainSemicolon(meaning)

		if semicolonIndex == -1 {
			// –ù–µ—Ç –ø—Ä–∏–º–µ—Ä–æ–≤, —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥
			mainTranslation := cleanTranslation(meaning)
			mainTranslation = expandAbbreviations(mainTranslation)
			result.WriteString(mainTranslation)
		} else {
			// –ï—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥ –∏ –ø—Ä–∏–º–µ—Ä—ã
			mainTranslation := cleanTranslation(meaning[:semicolonIndex])
			mainTranslation = expandAbbreviations(mainTranslation)
			examples := meaning[semicolonIndex+1:]

			result.WriteString(mainTranslation)

			// –ü–∞—Ä—Å–∏–º –ø—Ä–∏–º–µ—Ä—ã
			examplesList := parseExamples(examples)
			if len(examplesList) > 0 {
				result.WriteString("\n")
				for _, example := range examplesList {
					// –ó–∞–º–µ–Ω—è–µ–º —Ç–∏–ª—å–¥—É –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–ª–æ–≤–æ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö
					if word != "" {
						example = replaceTildeWithWord(example, word)
					}
					// –ó–∞–º–µ–Ω—è–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö
					example = expandAbbreviations(example)
					result.WriteString(fmt.Sprintf("   ‚Ä¢ %s\n", example))
				}
			}
		}

		if i < len(parts)-1 && strings.TrimSpace(parts[i+1]) != "" {
			result.WriteString("\n")
		}
	}

	return strings.TrimSpace(result.String())
}

// findMainSemicolon –Ω–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–∑–¥–µ–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥ –∏ –ø—Ä–∏–º–µ—Ä—ã
func findMainSemicolon(text string) int {
	// –ò—â–µ–º –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–π –µ—Å—Ç—å —Ç–∏—Ä–µ (–ø—Ä–∏–∑–Ω–∞–∫ –ø—Ä–∏–º–µ—Ä–∞)
	semicolons := []int{}
	for i, r := range text {
		if r == ';' {
			semicolons = append(semicolons, i)
		}
	}

	for _, pos := range semicolons {
		afterSemicolon := text[pos+1:]
		// –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π –µ—Å—Ç—å —Ç–∏—Ä–µ, —Ç–æ —ç—Ç–æ –Ω–∞—á–∞–ª–æ –ø—Ä–∏–º–µ—Ä–æ–≤
		if strings.Contains(afterSemicolon, "-") {
			return pos
		}
	}

	// –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é
	if len(semicolons) > 0 {
		return semicolons[0]
	}

	return -1
}

// cleanTranslation –æ—á–∏—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
func cleanTranslation(text string) string {
	// –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
	text = strings.TrimSpace(text)
	text = strings.TrimPrefix(text, "-")
	text = strings.TrimSpace(text)
	return text
}

// parseExamples –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—Ä—É—Å—Å–∫–∞—è —Ñ—Ä–∞–∑–∞ - —á–µ—á–µ–Ω—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥"
func parseExamples(text string) []string {
	var examples []string

	// –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–¥–µ–ª–∏–º –ø–æ —Ç–æ—á–∫–∞–º —Å –∑–∞–ø—è—Ç–æ–π
	parts := strings.Split(text, ";")
	for _, part := range parts {
		part = strings.TrimSpace(part)
		if part == "" {
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∏—Ä–µ –≤ —á–∞—Å—Ç–∏
		if strings.Contains(part, "-") {
			// –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ —Ç–∏—Ä–µ
			dashIndex := strings.Index(part, "-")
			if dashIndex > 0 && dashIndex < len(part)-1 {
				russian := strings.TrimSpace(part[:dashIndex])
				chechen := strings.TrimSpace(part[dashIndex+1:])

				// –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
				russian = strings.Trim(russian, `"¬´¬ª""`)
				chechen = strings.Trim(chechen, `"¬´¬ª""`)

				if russian != "" && chechen != "" {
					examples = append(examples, fmt.Sprintf("%s ‚Üí %s", russian, chechen))
				}
			} else {
				// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ —Ç–∏—Ä–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
				examples = append(examples, part)
			}
		} else {
			// –ï—Å–ª–∏ –Ω–µ—Ç —Ç–∏—Ä–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ-–ø—Ä–∏–º–µ—Ä
			examples = append(examples, part)
		}
	}

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–æ 5
	if len(examples) > 5 {
		examples = examples[:5]
	}

	return examples
}

// getNumberEmoji –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ —Ü–∏—Ñ—Ä—ã –¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π
func getNumberEmoji(num int) string {
	emojis := []string{"", "1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£", "üîü"}
	if num > 0 && num < len(emojis) {
		return emojis[num]
	}
	return fmt.Sprintf("%dÔ∏è‚É£", num)
}

// replaceTildeWithWord –∑–∞–º–µ–Ω—è–µ—Ç —Ç–∏–ª—å–¥—É (~) –≤ —Ç–µ–∫—Å—Ç–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–ª–æ–≤–æ
func replaceTildeWithWord(text, word string) string {
	if word == "" {
		return text
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤—É —Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è
	wordBase := getWordBase(word)
	lowerWord := strings.ToLower(word)

	// –°–ª–æ–≤–∞—Ä—å –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –æ–∫–æ–Ω—á–∞–Ω–∏–π –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è
	commonEndings := map[string]string{
		"–∞":    wordBase + "–∞",    // —Ä–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –µ–¥.—á.
		"—É":    wordBase + "—É",    // –¥–∞—Ç–µ–ª—å–Ω—ã–π –µ–¥.—á.
		"–æ–º":   wordBase + "–æ–º",   // —Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –µ–¥.—á.
		"–µ":    wordBase + "–µ",    // –ø—Ä–µ–¥–ª–æ–∂–Ω—ã–π –µ–¥.—á.
		"–æ–π":   wordBase + "–æ–π",   // —Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –µ–¥.—á. (–∂–µ–Ω.—Ä–æ–¥)
		"–∞—Ö":   wordBase + "–∞—Ö",   // –ø—Ä–µ–¥–ª–æ–∂–Ω—ã–π –º–Ω.—á.
		"–∞–º–∏":  wordBase + "–∞–º–∏",  // —Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –º–Ω.—á.
		"—ã":    wordBase + "—ã",    // –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–Ω.—á.
		"–∏":    wordBase + "–∏",    // –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–Ω.—á. / —Ä–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –µ–¥.—á. (–∂–µ–Ω.—Ä–æ–¥)
		"—è—Ö":   wordBase + "—è—Ö",   // –ø—Ä–µ–¥–ª–æ–∂–Ω—ã–π –º–Ω.—á. (–º—è–≥–∫–∞—è –æ—Å–Ω–æ–≤–∞)
		"—è–º–∏":  wordBase + "—è–º–∏",  // —Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –º–Ω.—á. (–º—è–≥–∫–∞—è –æ—Å–Ω–æ–≤–∞)
		"–æ–≤":   wordBase + "–æ–≤",   // —Ä–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –º–Ω.—á. (–º—É–∂.—Ä–æ–¥)
		"–µ–≤":   wordBase + "–µ–≤",   // —Ä–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –º–Ω.—á. (–º—è–≥–∫–∞—è –æ—Å–Ω–æ–≤–∞)
		"–∞–º":   wordBase + "–∞–º",   // –¥–∞—Ç–µ–ª—å–Ω—ã–π –º–Ω.—á.
		"—ë–º":   wordBase + "—ë–º",   // —Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –µ–¥.—á. (–º—è–≥–∫–∞—è –æ—Å–Ω–æ–≤–∞)
		"–æ":    lowerWord,         // –≤–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π –µ–¥.—á. (–¥–ª—è —Å–ª–æ–≤ —Ç–∏–ø–∞ "—Å–ª–æ–≤–æ")
	}

	result := text

	// –°–Ω–∞—á–∞–ª–∞ –∑–∞–º–µ–Ω—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è
	tildeRe := regexp.MustCompile(`~([–∞-—è—ë]+)`)
	result = tildeRe.ReplaceAllStringFunc(result, func(match string) string {
		ending := match[1:] // —É–±–∏—Ä–∞–µ–º —Ç–∏–ª—å–¥—É
		if replacement, exists := commonEndings[ending]; exists {
			return replacement
		}
		// –ï—Å–ª–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–º–µ–Ω—É
		return wordBase + ending
	})

	// –ó–∞–º–µ–Ω–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–π —Ç–∏–ª—å–¥—ã –Ω–∞ –ø–æ–ª–Ω–æ–µ —Å–ª–æ–≤–æ
	result = strings.ReplaceAll(result, "~", lowerWord)

	return result
}

// getWordBase –ø–æ–ª—É—á–∞–µ—Ç –æ—Å–Ω–æ–≤—É —Å–ª–æ–≤–∞ –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è
func getWordBase(word string) string {
	word = strings.ToLower(word)

	// –†–∞–±–æ—Ç–∞–µ–º —Å —Ä—É–Ω–∞–º–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ UTF-8
	runes := []rune(word)
	if len(runes) > 1 {
		lastRune := string(runes[len(runes)-1])
		if strings.Contains("–∞–µ—ë–∏–æ—É—ã—ç—é—è", lastRune) {
			return string(runes[:len(runes)-1])
		}
	}

	return word
}

// expandAbbreviations –∑–∞–º–µ–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –Ω–∞ –ø–æ–ª–Ω—ã–µ —Ñ–æ—Ä–º—ã
func expandAbbreviations(text string) string {
	// –°–ª–æ–≤–∞—Ä—å —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π –∏ –∏—Ö —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–æ–∫
	abbreviations := map[string]string{
		"—Ç–∂.":        "—Ç–∞–∫–∂–µ",
		"–≤–≤–æ–¥–Ω. —Å–ª.": "(–≤–≤–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ)",
		"—Ä–∞–∑–≥.":      "(—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–µ)",
		"–ø—Ä–æ—Å—Ç.":     "(–ø—Ä–æ—Å—Ç–æ—Ä–µ—á–∏–µ)",
		"–ø–µ—Ä–µ–Ω.":     "(–ø–µ—Ä–µ–Ω–æ—Å–Ω–æ–µ)",
		"—É—Å—Ç–∞—Ä.":     "(—É—Å—Ç–∞—Ä–µ–≤—à–µ–µ)",
		"–∫–Ω–∏–∂–Ω.":     "(–∫–Ω–∏–∂–Ω–æ–µ)",
		"–æ—Ñ–∏—Ü.":      "(–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ)",
		"—Å–ø–µ—Ü.":      "(—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ)",
		"–º–µ–¥.":       "(–º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ)",
		"–≤–æ–µ–Ω.":      "(–≤–æ–µ–Ω–Ω–æ–µ)",
		"—é—Ä.":        "(—é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ)",
		"—Ç–µ—Ö.":       "(—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ)",
		"–º—É–∑.":       "(–º—É–∑—ã–∫–∞–ª—å–Ω–æ–µ)",
		"–º–∞—Ç.":       "(–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ)",
		"—Ñ–∏–∑.":       "(—Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ)",
		"—Ö–∏–º.":       "(—Ö–∏–º–∏—á–µ—Å–∫–æ–µ)",
		"–±–∏–æ–ª.":      "(–±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ)",
		"–≥–µ–æ–ª.":      "(–≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ)",
		"–±–æ—Ç.":       "(–±–æ—Ç–∞–Ω–∏—á–µ—Å–∫–æ–µ)",
		"–∑–æ–æ–ª.":      "(–∑–æ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ)",
		"–≥–µ–æ–≥—Ä.":     "(–≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ)",
		"–∏—Å—Ç.":       "(–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ)",
		"—ç–∫.":        "(—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ)",
		"–ø–æ–ª–∏—Ç.":     "(–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ)",
		"—Ä–µ–ª.":       "(—Ä–µ–ª–∏–≥–∏–æ–∑–Ω–æ–µ)",
		"—Ñ–∏–ª–æ—Å.":     "(—Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–µ)",
		"–ª–∏—Ç.":       "(–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–µ)",
		"–ø–æ—ç—Ç.":      "(–ø–æ—ç—Ç–∏—á–µ—Å–∫–æ–µ)",
		"–∏—Ä–æ–Ω.":      "(–∏—Ä–æ–Ω–∏—á–Ω–æ–µ)",
		"—à—É—Ç–ª.":      "(—à—É—Ç–ª–∏–≤–æ–µ)",
		"–ø—Ä–µ–Ω–µ–±—Ä.":   "(–ø—Ä–µ–Ω–µ–±—Ä–µ–∂–∏—Ç–µ–ª—å–Ω–æ–µ)",
		"–ª–∞—Å–∫.":      "(–ª–∞—Å–∫–∞—Ç–µ–ª—å–Ω–æ–µ)",
		"—É–º–µ–Ω—å—à.":    "—É–º–µ–Ω—å—à–∏—Ç–µ–ª—å–Ω–æ–µ",
		"—É–≤–µ–ª–∏—á.":    "(—É–≤–µ–ª–∏—á–∏—Ç–µ–ª—å–Ω–æ–µ)",
		"—Å–æ–±–∏—Ä.":     "(—Å–æ–±–∏—Ä–∞—Ç–µ–ª—å–Ω–æ–µ)",
		"–º–Ω–æ–∂.":      "(–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ)",
		"–µ–¥.":        "(–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ)",
		"–º–Ω.":        "(–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ)",
		"–∏–º.":        "(–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π)",
		"—Ä–æ–¥.":       "(—Ä–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π)",
		"–¥–∞—Ç.":       "(–¥–∞—Ç–µ–ª—å–Ω—ã–π)",
		"–≤–∏–Ω.":       "(–≤–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π)",
		"—Ç–≤.":        "(—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π)",
		"–ø—Ä.":        "(–ø—Ä–µ–¥–ª–æ–∂–Ω—ã–π)",
	}

	result := text

	// –ó–∞–º–µ–Ω—è–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –≥—Ä–∞–Ω–∏—Ü —Å–ª–æ–≤
	for abbrev, expansion := range abbreviations {
		// –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ –≤—Å–µ—Ö –≤—Ö–æ–∂–¥–µ–Ω–∏–π
		result = strings.ReplaceAll(result, abbrev, expansion)
	}

	return result
}

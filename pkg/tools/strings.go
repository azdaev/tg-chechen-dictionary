package tools

import (
	"fmt"
	"regexp"
	"strings"
)

func Clean(text string) string {
	re := regexp.MustCompile(`<[^>]*>`)
	output := re.ReplaceAllString(text, "")
	output = strings.ReplaceAll(output, "<>", ";")
	output = strings.ReplaceAll(output, "<br />", " ")
	output = strings.ReplaceAll(output, "\n", " ")
	return output
}

func EscapeUnclosedTags(text string) string {
	re := regexp.MustCompile(`<[^>]*>`)
	matches := re.FindAllString(text, -1)
	count := 0
	for _, match := range matches {
		if strings.HasPrefix(match, "</") {
			count--
		} else {
			count++
		}
	}
	if count != 0 {
		return Clean(text) //TODO: optimize - one function for check. if true clean
	}
	return text
}

// FormatTranslation —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä–Ω—É—é —Å—Ç–∞—Ç—å—é –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–æ—Ç–µ
func FormatTranslation(text string) string {
	if text == "" {
		return ""
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–ª–æ–≤–æ (–≤ –∂–∏—Ä–Ω–æ–º —à—Ä–∏—Ñ—Ç–µ –∏–ª–∏ –≤ –Ω–∞—á–∞–ª–µ)
	wordRe := regexp.MustCompile(`\*\*([^*]+)\*\*`)
	wordMatch := wordRe.FindStringSubmatch(text)

	var word string
	if len(wordMatch) > 1 {
		word = strings.TrimSpace(wordMatch[1])
		// –£–¥–∞–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
		text = wordRe.ReplaceAllString(text, "")
	}

	// –£–¥–∞–ª—è–µ–º —Ç–∏—Ä–µ –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ª–æ–≤–∞
	text = strings.TrimSpace(text)
	text = strings.TrimPrefix(text, "-")
	text = strings.TrimSpace(text)

	// –£–¥–∞–ª—è–µ–º –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–º–µ—Ç—ã (–æ–¥–Ω—É –±—É–∫–≤—É –≤ –Ω–∞—á–∞–ª–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä "–∂", "—Å", "–º")
	grammarRe := regexp.MustCompile(`^[–∞-—è—ë]\s+`)
	text = grammarRe.ReplaceAllString(text, "")

	// –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Ü–∏—Ñ—Ä–∞–º —Å —Å–∫–æ–±–∫–∞–º–∏ (1), 2), 3) –∏ —Ç.–¥.)
	meaningRe := regexp.MustCompile(`(\d+\))`)
	parts := meaningRe.Split(text, -1)
	meaningNumbers := meaningRe.FindAllString(text, -1)

	var result strings.Builder

	if word != "" {
		result.WriteString(fmt.Sprintf("üìù %s\n\n", strings.ToUpper(word)))
	}

	meaningIndex := 1
	for i, part := range parts {
		part = strings.TrimSpace(part)
		if part == "" {
			continue
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏—è
		if i > 0 && i-1 < len(meaningNumbers) {
			result.WriteString(fmt.Sprintf("%s%s ", getNumberEmoji(meaningIndex), meaningNumbers[i-1]))
			meaningIndex++
		} else if i == 0 && len(meaningNumbers) == 0 {
			// –ï—Å–ª–∏ –≤—Å–µ–≥–æ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏
			result.WriteString("1Ô∏è‚É£ ")
		} else if i == 0 {
			continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—É—é —á–∞—Å—Ç—å –¥–æ –ø–µ—Ä–≤–æ–π —Ü–∏—Ñ—Ä—ã
		}

		// –ü–∞—Ä—Å–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥ –∏ –ø—Ä–∏–º–µ—Ä—ã
		meaning := part

		// –†–∞–∑–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥ –∏ –ø—Ä–∏–º–µ—Ä—ã
		// –ò—â–µ–º –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –ø—Ä–∏–º–µ—Ä–∞
		semicolonIndex := findMainSemicolon(meaning)

		if semicolonIndex == -1 {
			// –ù–µ—Ç –ø—Ä–∏–º–µ—Ä–æ–≤, —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥
			mainTranslation := cleanTranslation(meaning)
			result.WriteString(mainTranslation)
		} else {
			// –ï—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥ –∏ –ø—Ä–∏–º–µ—Ä—ã
			mainTranslation := cleanTranslation(meaning[:semicolonIndex])
			examples := meaning[semicolonIndex+1:]

			result.WriteString(mainTranslation)

			// –ü–∞—Ä—Å–∏–º –ø—Ä–∏–º–µ—Ä—ã
			examplesList := parseExamples(examples)
			if len(examplesList) > 0 {
				result.WriteString("\n")
				for _, example := range examplesList {
					// –ó–∞–º–µ–Ω—è–µ–º —Ç–∏–ª—å–¥—É –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–ª–æ–≤–æ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö
					if word != "" {
						example = replaceTildeWithWord(example, word)
					}
					result.WriteString(fmt.Sprintf("   ‚Ä¢ %s\n", example))
				}
			}
		}

		if i < len(parts)-1 && strings.TrimSpace(parts[i+1]) != "" {
			result.WriteString("\n")
		}
	}

	return strings.TrimSpace(result.String())
}

// findMainSemicolon –Ω–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–∑–¥–µ–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥ –∏ –ø—Ä–∏–º–µ—Ä—ã
func findMainSemicolon(text string) int {
	// –ò—â–µ–º –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–π –µ—Å—Ç—å —Ç–∏—Ä–µ (–ø—Ä–∏–∑–Ω–∞–∫ –ø—Ä–∏–º–µ—Ä–∞)
	semicolons := []int{}
	for i, r := range text {
		if r == ';' {
			semicolons = append(semicolons, i)
		}
	}

	for _, pos := range semicolons {
		afterSemicolon := text[pos+1:]
		// –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π –µ—Å—Ç—å —Ç–∏—Ä–µ, —Ç–æ —ç—Ç–æ –Ω–∞—á–∞–ª–æ –ø—Ä–∏–º–µ—Ä–æ–≤
		if strings.Contains(afterSemicolon, "-") {
			return pos
		}
	}

	// –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é
	if len(semicolons) > 0 {
		return semicolons[0]
	}

	return -1
}

// cleanTranslation –æ—á–∏—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
func cleanTranslation(text string) string {
	// –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
	text = strings.TrimSpace(text)
	text = strings.TrimPrefix(text, "-")
	text = strings.TrimSpace(text)
	return text
}

// parseExamples –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—Ä—É—Å—Å–∫–∞—è —Ñ—Ä–∞–∑–∞ - —á–µ—á–µ–Ω—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥"
func parseExamples(text string) []string {
	var examples []string

	// –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–¥–µ–ª–∏–º –ø–æ —Ç–æ—á–∫–∞–º —Å –∑–∞–ø—è—Ç–æ–π
	parts := strings.Split(text, ";")
	for _, part := range parts {
		part = strings.TrimSpace(part)
		if part == "" {
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∏—Ä–µ –≤ —á–∞—Å—Ç–∏
		if strings.Contains(part, "-") {
			// –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ —Ç–∏—Ä–µ
			dashIndex := strings.Index(part, "-")
			if dashIndex > 0 && dashIndex < len(part)-1 {
				russian := strings.TrimSpace(part[:dashIndex])
				chechen := strings.TrimSpace(part[dashIndex+1:])

				// –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
				russian = strings.Trim(russian, `"¬´¬ª""`)
				chechen = strings.Trim(chechen, `"¬´¬ª""`)

				if russian != "" && chechen != "" {
					examples = append(examples, fmt.Sprintf("%s ‚Üí %s", russian, chechen))
				}
			} else {
				// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ —Ç–∏—Ä–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
				examples = append(examples, part)
			}
		} else {
			// –ï—Å–ª–∏ –Ω–µ—Ç —Ç–∏—Ä–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ-–ø—Ä–∏–º–µ—Ä
			examples = append(examples, part)
		}
	}

	return examples
}

// getNumberEmoji –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ —Ü–∏—Ñ—Ä—ã –¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π
func getNumberEmoji(num int) string {
	emojis := []string{"", "1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£", "üîü"}
	if num > 0 && num < len(emojis) {
		return emojis[num]
	}
	return fmt.Sprintf("%dÔ∏è‚É£", num)
}

// replaceTildeWithWord –∑–∞–º–µ–Ω—è–µ—Ç —Ç–∏–ª—å–¥—É (~) –≤ —Ç–µ–∫—Å—Ç–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–ª–æ–≤–æ
func replaceTildeWithWord(text, word string) string {
	if word == "" {
		return text
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤—É —Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è
	wordBase := getWordBase(word)

	// –ó–∞–º–µ–Ω—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–∏–ª—å–¥—ã
	result := text

	// –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ ~–∞, ~—É, ~–æ–π –∏ —Ç.–¥. –Ω–∞ –æ—Å–Ω–æ–≤—É + –æ–∫–æ–Ω—á–∞–Ω–∏–µ
	tildeRe := regexp.MustCompile(`~([–∞-—è—ë]+)`)
	result = tildeRe.ReplaceAllStringFunc(result, func(match string) string {
		ending := match[1:] // —É–±–∏—Ä–∞–µ–º —Ç–∏–ª—å–¥—É
		if ending == "" {
			return strings.ToLower(word) // –µ—Å–ª–∏ –Ω–µ—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–ª–æ–≤–æ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
		}
		return wordBase + ending
	})

	// –ó–∞–º–µ–Ω–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–π —Ç–∏–ª—å–¥—ã –Ω–∞ –ø–æ–ª–Ω–æ–µ —Å–ª–æ–≤–æ (–∫–æ—Ç–æ—Ä–∞—è –Ω–µ –±—ã–ª–∞ –∑–∞–º–µ–Ω–µ–Ω–∞ –≤—ã—à–µ)
	result = strings.ReplaceAll(result, "~", strings.ToLower(word))

	return result
}

// getWordBase –ø–æ–ª—É—á–∞–µ—Ç –æ—Å–Ω–æ–≤—É —Å–ª–æ–≤–∞ –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è
func getWordBase(word string) string {
	word = strings.ToLower(word)

	// –†–∞–±–æ—Ç–∞–µ–º —Å —Ä—É–Ω–∞–º–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ UTF-8
	runes := []rune(word)
	if len(runes) > 1 {
		lastRune := string(runes[len(runes)-1])
		if strings.Contains("–∞–µ—ë–∏–æ—É—ã—ç—é—è", lastRune) {
			return string(runes[:len(runes)-1])
		}
	}

	return word
}
